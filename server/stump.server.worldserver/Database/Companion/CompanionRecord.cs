using Stump.ORM;
using Stump.Core.IO;
using Stump.ORM.SubSonic.SQLGeneration.Schema;
using System.Linq;
using System.Collections.Generic;
using Stump.DofusProtocol.Enums;
using System;

namespace Stump.Server.WorldServer.Database.Companion
{
    [TableName("companions")]
    public class CompanionRecord : IAutoGeneratedRecord
    {
        List<int> m_spells = new List<int>();
        [PrimaryKey("Id")]
        public int Id
        {
            get;
            set;
        }
        public int ItemId
        {
            get;
            set;
        }
        public string Look
        {
            get;
            set;
        }
        public int StartingSpellLevelId
        {
            get;
            set;
        }
        [NullString]
        public string Characterisitcs
        {
            get { return CharacteristicsId.ToCSV(","); }
            set { CharacteristicsId = value.FromCSV<int>(",").ToList(); }
        }
        [NullString]
        public string Spells
        {
            get
            {
                return m_spells.ToCSV(",");
            }
            set
            {
                m_spells = value.FromCSV<int>(",").ToList();
            }
        }
        [NullString]
        public string BoneId
        {
            get;
            set;

        }
        [Ignore]
        public List<int> SpellsId
        {
            get
            {
                return m_spells;
            }
            set
            {
                m_spells = value;
            }
        }

        [Ignore]
        public List<int> CharacteristicsId { get; set; } = new List<int>();

        public PlayerFields GetCharacteristicById(int id)
        {
            switch (id)
            {
                case 0:
                    return PlayerFields.Health;
                case 1:
                    return PlayerFields.AP;
                case 16:
                    return PlayerFields.DamageBonus;//TEST AllDamagesBonus
                case 19:
                    return PlayerFields.Range;
                case 23:
                    return PlayerFields.MP;
                case 25:
                    return PlayerFields.DamageBonusPercent;
                case 26:
                    return PlayerFields.SummonLimit;
                case 27:
                    return PlayerFields.DodgeAPProbability;
                case 28:
                    return PlayerFields.DodgeMPProbability;
                case 33:
                    return PlayerFields.EarthResistPercent;
                case 34:
                    return PlayerFields.FireResistPercent;
                case 35:
                    return PlayerFields.WaterResistPercent;
                case 36:
                    return PlayerFields.AirResistPercent;
                case 37:
                    return PlayerFields.NeutralResistPercent;
                case 48:
                    return PlayerFields.Prospecting;
                case 78:
                    return PlayerFields.TackleEvade;
                case 79:
                    return PlayerFields.TackleBlock;
                case 82:
                    return PlayerFields.APAttack;
                case 83:
                    return PlayerFields.MPAttack;
                case 84:
                    return PlayerFields.PushDamageBonus;
                case 85:
                    return PlayerFields.PushDamageReduction;
                default:
                    throw new Exception("");
            }
        }

    }

}

